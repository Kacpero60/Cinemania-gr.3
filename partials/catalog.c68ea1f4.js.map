{"mappings":"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","sources":["src/js/catalog.js","src/js/pop-up.js"],"sourcesContent":["import { openPopUp, fetchGenres } from './pop-up.js'; // Importuj funkcje z pop-up.js\n\nconst apikey = '26ee83a5e26d7fcb87f8d8380af6bd82';\nconst gallery = document.querySelector(\".gallery\");\nlet currentPage = 1;\nlet totalPages = 24;\nconst perPage = 20;\nlet keyWord = '';\nlet selectedCountry = '';\nlet selectedYear = '';\nlet genresMap = {};\n\n// Funkcja do wyboru krajów\nasync function selector() {\n    const countrySelect = document.getElementById('countrySelect');\n    \n    try {\n        const response = await fetch(`https://restcountries.com/v3.1/all`);\n        const countries = await response.json();\n\n        for (let i = 0; i < countries.length; i++) {\n            const country = countries[i];\n            const option = document.createElement('option');\n            option.value = country.cca2;\n            option.textContent = country.name.common;\n            countrySelect.appendChild(option);\n        }\n    } catch (error) {\n        console.error('Błąd podczas pobierania krajów:', error);\n    }\n}\n\n// Funkcja do wyboru lat\nasync function populateYears() {\n    const yearSelect = document.getElementById('yearSelect');\n    const currentYear = new Date().getFullYear();\n\n    for (let year = currentYear; year >= 1980; year--) {\n        const option = document.createElement('option');\n        option.value = year;\n        option.textContent = year;\n        yearSelect.appendChild(option);\n    }\n}\n\n// Renderowanie przycisków paginacji\nasync function renderBtn() {\n    const paginationBtn = document.getElementById('pagination');\n    paginationBtn.innerHTML = '';\n\n    // przycisk do cofania\n    if (currentPage >= 1) {\n        const prevBtn = document.createElement('button');\n        prevBtn.textContent = '<';\n        prevBtn.classList.add('prevnext-btn');\n\n        prevBtn.addEventListener('click', () => {\n            currentPage--;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(prevBtn);\n    }\n\n    // wyświetlanie pierwszych trzech stron\n    for (let i = 1; i <= Math.min(3, totalPages); i++) {\n        const btn = document.createElement('button');\n        btn.textContent = i;\n        btn.classList.add('pagination-btn');\n        \n        if (i === currentPage) {\n            btn.classList.add('active');\n        }\n\n        btn.addEventListener('click', () => {\n            currentPage = i;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(btn);\n    }\n\n    // kropki, jeśli jest więcej niż 3 strony\n    if (totalPages > 3) {\n        const dots = document.createElement('div');\n        dots.textContent = '...';\n        dots.classList.add('dots');\n        paginationBtn.appendChild(dots);\n\n        // wyświetlenie ostatniej strony\n        const lastBtn = document.createElement('button');\n        lastBtn.textContent = 24;\n        lastBtn.classList.add('pagination-btn');\n        lastBtn.addEventListener('click', () => {\n            currentPage = 24;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(lastBtn);\n    }\n\n    // przycisk do następnej strony\n    if (currentPage < totalPages) {\n        const nextBtn = document.createElement('button');\n        nextBtn.textContent = '>';\n        nextBtn.classList.add('prevnext-btn');\n        nextBtn.addEventListener('click', () => {\n            currentPage++;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(nextBtn);\n    }\n}\n\n// pobieranie popularnych filmów\nasync function popularMovies(page = 1) {\n    const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n    const yearParams = selectedYear ? `&primary_release_year=${selectedYear}` : '';\n    const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n    \n    try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n            throw new Error('response was not ok');\n        }\n        const data = await response.json();\n        totalPages = data.total_pages;\n        gallery.innerHTML = '';\n\n        if (data.results.length > 0) {\n            data.results.forEach(movie => {\n                const movieEl = document.createElement('div');\n                movieEl.className = 'movie';\n\n                const imgEl = document.createElement('img');\n\n               imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n                const titleEl = document.createElement('p');\n                titleEl.textContent = movie.title;\n                titleEl.className = 'movie-title';\n                \n                const genresEl = document.createElement('p');\n                const genres = movie.genre_ids.map(id => genresMap[id]).filter(name => name).join(', ');\n                const year = movie.release_date.split('-')[0];\n                genresEl.textContent = `${genres} | ${year}`;\n                genresEl.className = 'movie-genres-year';\n                \n                movieEl.appendChild(imgEl);\n                movieEl.appendChild(titleEl);\n                movieEl.appendChild(genresEl);\n                gallery.appendChild(movieEl);\n                \n                movieEl.addEventListener(\"click\", () => {\n                    openPopUp(movie, apikey);\n                });\n            });\n        } else {\n            gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n        }\n\n        renderBtn();\n    } catch (error) {\n        console.error('Błąd podczas pobierania filmów:', error);\n    }\n}\n\n// wyszukiwanie filmów\nasync function searchMovies(keyWord, page = 1) {\n    const yearParams = selectedYear ? `&primary_release_year=${selectedYear}` : '';\n    const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n    const apiURL = `https://api.themoviedb.org/3/search/movie?query=${keyWord}&api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n    \n    try {\n        const response = await fetch(apiURL);\n        if (!response.ok) {\n            throw new Error('response was not ok');\n        }\n        const data = await response.json();\n        totalPages = data.total_pages;\n        gallery.innerHTML = '';\n        \n        if (data.results.length > 0) {\n            data.results.forEach(movie => {\n                const movieEl = document.createElement('div');\n                movieEl.className = 'movie';\n                \n                // Pobieranie obrazów dla danego filmu\n                const imageResponse = fetch(`https://api.themoviedb.org/3/movie/${movie.id}/images?api_key=${apikey}`);\n                const imageData = imageResponse.json();\n                \n                // Sprawdzanie, czy są dostępne postery\n                if (imageData.posters.length > 0) {\n                    const imgEl = document.createElement('img');\n                    imgEl.src = `https://image.tmdb.org/t/p/w500${imageData.posters[0].file_path}`; \n                    movieEl.appendChild(imgEl);\n                }\n\n                // Tytuł filmu\n                const titleEl = document.createElement('p');\n                titleEl.textContent = movie.title;\n                titleEl.className = 'movie-title';\n                \n                const genresEl = document.createElement('p');\n                const genres = movie.genre_ids.map(id => genresMap[id]).filter(name => name).join(', ');\n                const year = movie.release_date.split('-')[0];\n                genresEl.textContent = `${genres} | ${year}`;\n                genresEl.className = 'movie-genres-year';\n                \n            \n                movieEl.appendChild(imgEl);\n                movieEl.appendChild(titleEl);\n                gallery.appendChild(movieEl);\n                movieEl.appendChild(genresEl);\n            });\n        } else {\n            gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n        }\n\n        renderBtn();\n    } catch (error) {\n        console.error('Błąd podczas wyszukiwania filmów:', error);\n    }\n}\n\n// Gatunki filmów\nasync function fetchGenre() {\n    const urlGenre = `https://api.themoviedb.org/3/genre/movie/list?api_key=${apikey}`;\n    \n    try {\n        const response = await fetch(urlGenre);\n        if (!response.ok) {\n            throw new Error('response was not ok');\n        }\n        const data = await response.json();\n\n        genresMap = {};\n        data.genres.forEach(genre => {\n            genresMap[genre.id] = genre.name;\n        });\n    } catch (error) {\n        console.error('error:', error);\n    }\n}\n\nfetchGenre();\n\n// Inicjalizacja przycisku wyszukiwania\ndocument.getElementById('searchButton').addEventListener('click', function(event) {\n    event.preventDefault();\n\n    // Wartość inputu\n    keyWord = document.getElementById('searchInput').value;\n    currentPage = 1; // Resetowanie strony\n    updateMovies();\n});\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    const searchInput = document.getElementById('searchInput');\n    const clearButton = document.getElementById('clearButton');\n\n    // Wyświetl przycisk czyszczenia, jeśli pole wyszukiwania ma wartość\n    searchInput.addEventListener('input', function () {\n        if (searchInput.value.length > 0) {\n            clearButton.style.display = 'block'; // Wyświetla przycisk\n        } else {\n            clearButton.style.display = 'none'; // Ukrywa przycisk\n        }\n    });\n\n    // Funkcja do czyszczenia pola wyszukiwania\n    clearButton.addEventListener('click', function () {\n        searchInput.value = ''; // Czyści pole\n        clearButton.style.display = 'none'; // Ukrywa przycisk\n        searchInput.focus(); // Ustawia fokus na pole wyszukiwania\n    });\n\n    // Inicjalizacja przycisku wyszukiwania\n    document.getElementById('searchButton').addEventListener('click', function(event) {\n        event.preventDefault();\n        const keyWord = searchInput.value; // Wartość inputu\n        // Wywołaj funkcję do wyszukiwania filmów, jeśli jest to potrzebne\n        if (keyWord) {\n            searchMovies(keyWord); // Wywołanie funkcji wyszukiwania filmów\n        }\n    });\n});\n\n// Inicjalizacja\nasync function init() {\n    await fetchGenres();\n    await selector();\n    await populateYears();\n    popularMovies(currentPage); // Domyślnie załaduj popularne filmy\n}\n\ninit();\n","// Funkcja do otwierania pop-upu\nexport async function openPopUp(movie, apikey) {\n    const popUpContainer = document.getElementById('popUpContainer');\n    const popUpImage = document.getElementById('popUpImage');\n    const popUpDescription = document.getElementById('popUpDescription');\n\n    // Clear previous content\n    popUpImage.innerHTML = ''; // Clear any existing image\n    popUpDescription.innerHTML = ''; // Clear any existing description\n\n    // Create an img element for the movie poster\n    const imgEl = document.createElement('img');\n    imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n    // Append the image to the pop-up image div\n    popUpImage.appendChild(imgEl);\n\n    // Fetch genres and map them\n    const genreMap = await fetchGenres(apikey);\n    const genreNames = movie.genre_ids.map(id => genreMap[id]).filter(name => name); // Map IDs to names\n\n    popUpDescription.innerHTML = `\n        <h2>${movie.title}</h2>\n        <p class=\"pop-up-description-data vote\" >Vote / Votes: <span> ${movie.vote_average} / ${movie.vote_count}</span></p>\n        <p class=\"pop-up-description-data popularity\">Popularity: <span>${movie.popularity}</span></p>\n        <p class=\"pop-up-description-data gendre\">Genre: <span>${genreNames.length > 0 ? genreNames.join(', ') : ''}</span></p>\n        <p class=\"pop-up-description-data about\"> ABOUT:</p>\n        <p class=\"pop-up-description-data about-desc\"> ${movie.overview}</p>\n        <button class=\"buttonAddToMyLibrary\" id=\"buttonAddToMyLibrary\">Add to my</button>\n    `;\n\n    // Show the pop-up\n    popUpContainer.style.display = 'flex';\n\n    console.log(movie.title);\n\n    // Close pop-up event\n    document.getElementById('closePopUp').onclick = function() {\n        popUpContainer.style.display = 'none';\n    };\n}\n\n// Funkcja do pobierania gatunków\nexport async function fetchGenres(apikey) {\n    try {\n        const response = await fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${apikey}&language=en-US&`);\n        const data = await response.json();\n\n        // Tworzenie mapy ID gatunków do nazw\n        const genreMap = {};\n        data.genres.forEach(genre => {\n            genreMap[genre.id] = genre.name;\n        });\n\n        return genreMap;\n    } catch (error) {\n        console.error('Błąd podczas pobierania gatunków:', error);\n        return {};\n    }\n}"],"names":["$bpxeT","parcelRequire","$dae67d51b9dcdf97$export$873fe25bfa110c5b","movie","apikey","$dae67d51b9dcdf97$var$_openPopUp","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","popUpContainer","popUpImage","popUpDescription","imgEl","genreMap","genreNames","document","getElementById","innerHTML","createElement","src","concat","poster_path","appendChild","$dae67d51b9dcdf97$export$e95d448b93b2cdb","_ctx","sent","genre_ids","map","id","filter","name","title","vote_average","vote_count","popularity","length","join","overview","style","display","console","log","onclick","$dae67d51b9dcdf97$var$_fetchGenres","response","data","fetch","json","genres","forEach","genre","error","t0","$01039996e00cb7ba$var$apikey","$01039996e00cb7ba$var$gallery","querySelector","$01039996e00cb7ba$var$currentPage","$01039996e00cb7ba$var$totalPages","$01039996e00cb7ba$var$keyWord","$01039996e00cb7ba$var$genresMap","$01039996e00cb7ba$var$selector","$01039996e00cb7ba$var$_selector","countrySelect","countries","i","country","option","value","cca2","textContent","common","$01039996e00cb7ba$var$populateYears","$01039996e00cb7ba$var$_populateYears","yearSelect","currentYear","year","Date","getFullYear","$01039996e00cb7ba$var$renderBtn","$01039996e00cb7ba$var$_renderBtn","paginationBtn","prevBtn","btn","dots","lastBtn","nextBtn","classList","add","addEventListener","$01039996e00cb7ba$var$searchMovies","$01039996e00cb7ba$var$popularMovies","Math","min","$01039996e00cb7ba$var$_popularMovies","page","regionParams","yearParams","apiUrl","_args","ok","Error","total_pages","results","movieEl","className","titleEl","genresEl","release_date","split","keyWord1","$01039996e00cb7ba$var$_searchMovies","apiURL","imageData","posters","_$imgEl","file_path","$01039996e00cb7ba$var$_fetchGenre","urlGenre","$01039996e00cb7ba$var$_init","$01039996e00cb7ba$var$fetchGenre","event","preventDefault","updateMovies","searchInput","clearButton","focus","keyWord2","$01039996e00cb7ba$var$init"],"version":3,"file":"catalog.c68ea1f4.js.map"}