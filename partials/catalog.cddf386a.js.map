{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,aCCAD,EAAAC,EAAA,S,sBAAsBC,EAAUC,EAAOC,G,OAAjBC,EAASC,MAAAC,KAAAC,U,UAATH,I,OAAAA,EAAfI,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,EAAyBT,EAAOC,G,IAC/BS,EACAC,EACAC,EAOAC,EAKAC,EACAC,EAKAC,EACAC,E,yEArBAP,EAAiBQ,SAASC,eAAe,kBACzCR,EAAaO,SAASC,eAAe,cACrCP,EAAmBM,SAASC,eAAe,oBAGjDR,EAAWS,UAAY,GACvBR,EAAiBQ,UAAY,IAGvBP,EAAQK,SAASG,cAAc,QAC/BC,IAAM,kCAAoDC,OAAlBvB,EAAMwB,aACpDb,EAAWc,YAAYZ,G,UAGAa,EAAYzB,G,QAA7Ba,EAAQa,EAAAC,KACRb,EAAaf,EAAM6B,UACtBC,KAAI,SAAAC,G,OAAMjB,EAASiB,E,IACnBC,QAAO,SAAAC,G,OAAQA,C,IAGZjB,EAAUkB,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,GACzDpB,EAAcD,EAAQsB,MAAK,SAAAC,G,OAAQA,EAAKR,KAAO/B,EAAM+B,E,IAG3DnB,EAAiBQ,UAAY,iBAGrBG,OAFIvB,EAAMwC,MAAM,iGAGoBjB,OADpCvB,EAAMyC,aACP,uCAEClB,OAFoCvB,EAAM0C,WAAW,iHAKrDnB,OAHAvB,EAAM2C,WACP,oGAK+CpB,OAH9CR,EAAW6B,OAAS,EAAI7B,EAAW8B,KAAK,MAAQ,UACjD,oIAG0FtB,OAD3CvB,EAAM8C,SAAS,2GACyFvB,OAA7DN,EAAc,yBAA2B,oBAAoB,yBAI9JP,EAAeqC,MAAMC,QAAU,OAG/B9B,SAASC,eAAe,cAAc8B,QAAU,WAC9CvC,EAAeqC,MAAMC,QAAU,M,EAIN9B,SAASC,eAAe,wBAChC8B,QAAU,WAC3BC,EAAalD,GAGZ,IACKmD,GADiBjB,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,IAChCC,MAAK,SAAAC,G,OAAQA,EAAKR,KAAO/B,EAAM+B,E,IACrE3B,KAAKgD,YAAcD,EAAiB,yBAA2B,mB,+CAzDpChD,MAAAC,KAAAC,U,UA8DTqB,EAAYzB,G,OAAZoD,EAAWlD,MAAAC,KAAAC,U,UAAXgD,I,OAAAA,EAAf/C,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,EAA2BR,G,IAExBqD,EAGAC,EAGAzC,E,2FANiB0C,MACrB,yDAAgEjC,OAAPtB,EAAO,oB,cAD5DqD,EAAQ3B,EAAAC,K,SAGK0B,EAASG,O,cAAtBF,EAAI5B,EAAAC,KAGJd,EAAW,GACjByC,EAAKG,OAAOC,SAAQ,SAAAC,GAClB9C,EAAS8C,EAAM7B,IAAM6B,EAAM3B,I,sBAGtBnB,G,yCAEP+C,QAAQC,MAAM,oCAAmCnC,EAAAoC,I,kBACvC,I,2DAhBmB5D,MAAAC,KAAAC,U,CAqB/B,SAAO6C,EAAalD,GACpB,IAAIgB,EAAUkB,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,GAGvD2B,EAAqBhD,EAAQiD,WAAU,SAAA1B,G,OAAQA,EAAKR,KAAO/B,EAAM+B,E,KAE5C,IAAvBiC,GAEFhD,EAAQkD,KAAKlE,GACbmE,MAAM,GAAe5C,OAAZvB,EAAMwC,MAAM,2CAGnBxB,EAAMoD,OAAOJ,EAAoB,GACnCG,MAAM,GAAe5C,OAAZvB,EAAMwC,MAAM,2CAIvBJ,aAAaiC,QAAQ,UAAWnC,KAAKoC,UAAUtD,G,CDnGjD,IAAMuD,EAAS,mCACTC,EAAUtD,SAASuD,cAAc,YACnCC,EAAc,EACdC,EAAa,GACbC,EAAU,GAGVC,EAAY,G,SAGDC,I,OAAAA,EAAfxE,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,I,IACQsE,EAGEzB,EACA0B,EAEGC,EACDC,EACAC,E,yEARJJ,EAAgB7D,SAASC,eAAe,iB,kBAGrBqC,MAAO,sC,cAAxBF,EAAQ3B,EAAAC,K,SACU0B,EAASG,O,OAEjC,IAFMuB,EAASrD,EAAAC,KAENqD,EAAI,EAAGA,EAAID,EAAUpC,OAAQqC,IAC9BC,EAAUF,EAAUC,IACpBE,EAASjE,SAASG,cAAc,WAC/B+D,MAAQF,EAAQG,KACvBF,EAAO/B,YAAc8B,EAAQjD,KAAKqD,OAClCP,EAActD,YAAY0D,G,kDAG5BtB,QAAQC,MAAM,kCAAiCnC,EAAAoC,I,2DAf5B5D,MAAAC,KAAAC,U,UAoBRkF,I,OAAAA,EAAfjF,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,I,IACQ+E,EACAC,EAEGC,EACDP,E,kEADR,IAHMK,EAAatE,SAASC,eAAe,cACrCsE,GAAc,IAAIE,MAAOC,cAEtBF,EAAOD,EAAaC,GAAQ,KAAMA,KACnCP,EAASjE,SAASG,cAAc,WAC/B+D,MAAQM,EACfP,EAAO/B,YAAcsC,EACrBF,EAAW/D,YAAY0D,G,4CARChF,MAAAC,KAAAC,U,UAabwF,I,OAAAC,EAAS3F,MAAAC,KAAAC,U,UAATyF,I,OAAAA,EAAfxF,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,I,IACQsF,EAKEC,EAaCf,EACDgB,EAkBAC,EAMAC,EAaAC,E,kEAtCR,KAlBML,EAAgB7E,SAASC,eAAe,eAChCC,UAAY,GAGtBsD,GAAe,KACXsB,EAAU9E,SAASG,cAAc,WAC/B+B,YAAc,IACtB4C,EAAQK,UAAUC,IAAI,gBAEtBN,EAAQO,iBAAiB,SAAS,WAChC7B,IACAE,EAAU4B,EAAa5B,EAASF,GAAe+B,EAAc/B,GAC7DmB,G,IAEFE,EAActE,YAAYuE,IAInBf,EAAI,EAAGA,GAAKyB,KAAKC,IAAI,EAAGhC,GAAaM,KACtCgB,EAAM/E,SAASG,cAAc,WAC/B+B,YAAc6B,EAClBgB,EAAII,UAAUC,IAAI,kBAEdrB,IAAMP,GACRuB,EAAII,UAAUC,IAAI,UAGpBL,EAAIM,iBAAiB,SAAS,WAC5B7B,EAAcO,EACdL,EAAU4B,EAAa5B,EAASF,GAAe+B,EAAc/B,GAC7DmB,G,IAEFE,EAActE,YAAYwE,GAIxBtB,EAAa,KACTuB,EAAOhF,SAASG,cAAc,QAC/B+B,YAAc,MACnB8C,EAAKG,UAAUC,IAAI,QACnBP,EAActE,YAAYyE,IAGpBC,EAAUjF,SAASG,cAAc,WAC/B+B,YAAcuB,EACtBwB,EAAQE,UAAUC,IAAI,kBACtBH,EAAQI,iBAAiB,SAAS,WAChC7B,EAAcC,EACdC,EAAU4B,EAAa5B,EAASF,GAAe+B,EAAc/B,GAC7DmB,G,IAEFE,EAActE,YAAY0E,IAIxBzB,EAAcC,KACVyB,EAAUlF,SAASG,cAAc,WAC/B+B,YAAc,IACtBgD,EAAQC,UAAUC,IAAI,gBACtBF,EAAQG,iBAAiB,SAAS,WAChC7B,IACAE,EAAU4B,EAAa5B,EAASF,GAAe+B,EAAc/B,GAC7DmB,G,IAEFE,EAActE,YAAY2E,I,4CAjENjG,MAAAC,KAAAC,U,UAsEToG,I,OAAAG,EAAazG,MAAAC,KAAAC,U,UAAbuG,I,OAAAA,EAAftG,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,I,IAA6BoG,EACrBC,EACAC,EAGAC,EAGE1D,EAIAC,EAAI0D,EAAA5G,U,yEAZewG,EAAAI,EAAArE,OAAA,YAAAqE,EAAA,GAAQA,EAAA,GAAD,EAC5BH,EAAgE,GAChEC,EAEF,GACEC,EAAS,sDAAwGzF,OAAlDgD,EAAO,6CAAkDhD,OAAPsF,GAAsBtF,OAAfuF,GAA0BvF,OAAXwF,G,kBAGpHvD,MAAMwD,G,WAAvB1D,EAAQ3B,EAAAC,MACAsF,GAAE,C,gBACd,MAAM,IAAIC,MAAM,uB,yBAEC7D,EAASG,O,QAAtBF,EAAI5B,EAAAC,KACV+C,EAAapB,EAAK6D,YAClB5C,EAAQpD,UAAY,GAEhBmC,EAAK8D,QAAQzE,OAAS,EACxBW,EAAK8D,QAAQ1D,SAAQ,SAAA3D,GACnB,IAAMsH,EAAUpG,SAASG,cAAc,OACvCiG,EAAQC,UAAY,QAEpB,IAAM1G,EAAQK,SAASG,cAAc,OACrCR,EAAMS,IAAM,kCAAoDC,OAAlBvB,EAAMwB,aAEpD,IAAMgG,EAAUtG,SAASG,cAAc,KACvCmG,EAAQpE,YAAcpD,EAAMwC,MAC5BgF,EAAQD,UAAY,cAEpB,IAAME,EAAWvG,SAASG,cAAc,KAClCqC,EAAS1D,EAAM6B,UAClBC,KAAI,SAAAC,G,OAAM8C,EAAU9C,E,IACpBC,QAAO,SAAAC,G,OAAQA,C,IACfY,KAAK,MACF6C,EAAO1F,EAAM0H,aAAaC,MAAM,KAAK,GAC3CF,EAASrE,YAAc,GAAe7B,OAAZmC,EAAO,OAAUnC,OAALmE,GACtC+B,EAASF,UAAY,oBAErBD,EAAQ7F,YAAYZ,GACpByG,EAAQ7F,YAAY+F,GACpBF,EAAQ7F,YAAYgG,GACpBjD,EAAQ/C,YAAY6F,GAEpBA,EAAQf,iBAAiB,SAAS,WAChCxG,EAAUC,EAAOuE,E,OAIrBC,EAAQpB,YAAc,mDAGtByC,I,kDAEFhC,QAAQC,MAAM,kCAAiCnC,EAAAoC,I,0DApDpC6C,EAAazG,MAAAC,KAAAC,U,UAyDbmG,EAAaoB,G,OAAbC,EAAY1H,MAAAC,KAAAC,U,UAAZwH,I,OAAAA,EAAfvH,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,EAA4BmH,G,IAASf,EAC7BE,EAGAD,EACAgB,EAGEC,EAIAxE,EAAI0D,EAAA5G,U,yEAZuBwG,EAAAI,EAAArE,OAAA,YAAAqE,EAAA,GAAQA,EAAA,GAAD,EACpCF,EAEF,GACED,EAAgE,GAChEgB,EAAS,mDAAsEvG,OAAnBqG,EAAQ,aAA6DrG,OAAlDgD,EAAO,6CAAkDhD,OAAPsF,GAAsBtF,OAAfuF,GAA0BvF,OAAXwF,G,kBAGpIvD,MAAMsE,G,WAAvBC,EAAQpG,EAAAC,MACAsF,GAAE,C,gBACd,MAAM,IAAIC,MAAM,uB,yBAECY,EAAStE,O,QAAtBF,EAAI5B,EAAAC,KACV+C,EAAapB,EAAK6D,YAClB5C,EAAQpD,UAAY,GAEhBmC,EAAK8D,QAAQzE,OAAS,EACxBW,EAAK8D,QAAQ1D,SAAQ,SAAA3D,GACnB,IAAMsH,EAAUpG,SAASG,cAAc,OACvCiG,EAAQC,UAAY,QAGnB/D,MACC,sCAAiEjC,OAA3BvB,EAAM+B,GAAG,oBAAyBR,OAAPgD,IAEhEyD,MAAK,SAAA1E,G,OAAYA,EAASG,M,IAC1BuE,MAAK,SAAAC,GACJ,GAAIA,EAAUC,QAAQtF,OAAS,EAAG,CAChC,IAAM/B,EAAQK,SAASG,cAAc,OACrCR,EAAMS,IAAM,kCAAiEC,OAA/B0G,EAAUC,QAAQ,GAAGC,WACnEb,EAAQ7F,YAAYZ,E,CAIrB,IAAK2G,EAAUtG,SAASG,cAAc,KACvCmG,EAAQpE,YAAcpD,EAAMwC,MAC5BgF,EAAQD,UAAY,cAEpB,IAAME,EAAWvG,SAASG,cAAc,KAClCqC,EAAS1D,EAAM6B,UAClBC,KAAI,SAAAC,G,OAAM8C,EAAU9C,E,IACpBC,QAAO,SAAAC,G,OAAQA,C,IACfY,KAAK,MACF6C,EAAO1F,EAAM0H,aAAaC,MAAM,KAAK,GAC3CF,EAASrE,YAAc,GAAe7B,OAAZmC,EAAO,OAAUnC,OAALmE,GACtC+B,EAASF,UAAY,oBAErBD,EAAQ7F,YAAY+F,GACpBF,EAAQ7F,YAAYgG,GACpBjD,EAAQ/C,YAAY6F,GACpBA,EAAQf,iBAAiB,SAAS,WAChCxG,EAAUC,EAAOuE,E,UAKzBC,EAAQpB,YAAc,mDAGtByC,I,kDAEFhC,QAAQC,MAAM,oCAAmCnC,EAAAoC,I,0DA7DtC8D,EAAY1H,MAAAC,KAAAC,U,UAkEZ+H,I,OAAAC,EAAUlI,MAAAC,KAAAC,U,UAAVgI,I,OAAAA,EAAf/H,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,I,IACQ6H,EAGEhF,EAIAC,E,yEAPF+E,EAAW,yDAAgE/G,OAAPgD,G,kBAGjDf,MAAM8E,G,WAAvBhF,EAAQ3B,EAAAC,MACAsF,GAAE,C,eACd,MAAM,IAAIC,MAAM,uB,uBAEC7D,EAASG,O,OAAtBF,EAAI5B,EAAAC,KAEViD,EAAY,GACZtB,EAAKG,OAAOC,SAAQ,SAAAC,GAClBiB,EAAUjB,EAAM7B,IAAM6B,EAAM3B,I,sDAG9B4B,QAAQC,MAAM,SAAQnC,EAAAoC,I,2DAfD5D,MAAAC,KAAAC,U,UAoBVkI,I,OAAAA,EAAfjI,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,I,kFACQ2H,I,uBACA3B,I,4CAFWtG,MAAAC,KAAAC,U,CAMnBa,SAASC,eAAe,gBAAgBoF,iBAAiB,QAASjG,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,I,yEAChEmE,EAAU1D,SAASC,eAAe,eAAeiE,MACjDV,EAAc,E,SACP8B,EAAY5B,EAASF,G,uDA/PfI,EAAQ3E,MAAAC,KAAAC,U,CAmQvBmI,G,WA/OejD,EAAapF,MAAAC,KAAAC,U,CAgP5BoI,G,WAdeF,EAAIpI,MAAAC,KAAAC,U,CAenBqI,E","sources":["src/js/catalog.js","src/js/pop-up-movie.js"],"sourcesContent":["import { openPopUp, fetchGenres } from './pop-up-movie.js'; // Importuj funkcje z pop-up.js\n\nconst apikey = '26ee83a5e26d7fcb87f8d8380af6bd82';\nconst gallery = document.querySelector('.gallery');\nlet currentPage = 1;\nlet totalPages = 24;\nlet keyWord = '';\nlet selectedCountry = '';\nlet selectedYear = '';\nlet genresMap = {};\n\n// Funkcja do wyboru krajów\nasync function selector() {\n  const countrySelect = document.getElementById('countrySelect');\n\n  try {\n    const response = await fetch(`https://restcountries.com/v3.1/all`);\n    const countries = await response.json();\n\n    for (let i = 0; i < countries.length; i++) {\n      const country = countries[i];\n      const option = document.createElement('option');\n      option.value = country.cca2;\n      option.textContent = country.name.common;\n      countrySelect.appendChild(option);\n    }\n  } catch (error) {\n    console.error('Błąd podczas pobierania krajów:', error);\n  }\n}\n\n// Funkcja do wyboru lat\nasync function populateYears() {\n  const yearSelect = document.getElementById('yearSelect');\n  const currentYear = new Date().getFullYear();\n\n  for (let year = currentYear; year >= 1980; year--) {\n    const option = document.createElement('option');\n    option.value = year;\n    option.textContent = year;\n    yearSelect.appendChild(option);\n  }\n}\n\n// Renderowanie przycisków paginacji\nasync function renderBtn() {\n  const paginationBtn = document.getElementById('pagination');\n  paginationBtn.innerHTML = '';\n\n  // przycisk do cofania\n  if (currentPage >= 1) {\n    const prevBtn = document.createElement('button');\n    prevBtn.textContent = '<';\n    prevBtn.classList.add('prevnext-btn');\n\n    prevBtn.addEventListener('click', () => {\n      currentPage--;\n      keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n      renderBtn();\n    });\n    paginationBtn.appendChild(prevBtn);\n  }\n\n  // wyświetlanie pierwszych trzech stron\n  for (let i = 1; i <= Math.min(3, totalPages); i++) {\n    const btn = document.createElement('button');\n    btn.textContent = i;\n    btn.classList.add('pagination-btn');\n\n    if (i === currentPage) {\n      btn.classList.add('active');\n    }\n\n    btn.addEventListener('click', () => {\n      currentPage = i;\n      keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n      renderBtn();\n    });\n    paginationBtn.appendChild(btn);\n  }\n\n  // kropki, jeśli jest więcej niż 3 strony\n  if (totalPages > 3) {\n    const dots = document.createElement('div');\n    dots.textContent = '...';\n    dots.classList.add('dots');\n    paginationBtn.appendChild(dots);\n\n    // wyświetlenie ostatniej strony\n    const lastBtn = document.createElement('button');\n    lastBtn.textContent = totalPages;\n    lastBtn.classList.add('pagination-btn');\n    lastBtn.addEventListener('click', () => {\n      currentPage = totalPages;\n      keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n      renderBtn();\n    });\n    paginationBtn.appendChild(lastBtn);\n  }\n\n  // przycisk do następnej strony\n  if (currentPage < totalPages) {\n    const nextBtn = document.createElement('button');\n    nextBtn.textContent = '>';\n    nextBtn.classList.add('prevnext-btn');\n    nextBtn.addEventListener('click', () => {\n      currentPage++;\n      keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n      renderBtn();\n    });\n    paginationBtn.appendChild(nextBtn);\n  }\n}\n\n// pobieranie popularnych filmów\nasync function popularMovies(page = 1) {\n  const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n  const yearParams = selectedYear\n    ? `&primary_release_year=${selectedYear}`\n    : '';\n  const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n\n  try {\n    const response = await fetch(apiUrl);\n    if (!response.ok) {\n      throw new Error('response was not ok');\n    }\n    const data = await response.json();\n    totalPages = data.total_pages;\n    gallery.innerHTML = '';\n\n    if (data.results.length > 0) {\n      data.results.forEach(movie => {\n        const movieEl = document.createElement('div');\n        movieEl.className = 'movie';\n\n        const imgEl = document.createElement('img');\n        imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n        const titleEl = document.createElement('p');\n        titleEl.textContent = movie.title;\n        titleEl.className = 'movie-title';\n\n        const genresEl = document.createElement('p');\n        const genres = movie.genre_ids\n          .map(id => genresMap[id])\n          .filter(name => name)\n          .join(', ');\n        const year = movie.release_date.split('-')[0];\n        genresEl.textContent = `${genres} | ${year}`;\n        genresEl.className = 'movie-genres-year';\n\n        movieEl.appendChild(imgEl);\n        movieEl.appendChild(titleEl);\n        movieEl.appendChild(genresEl);\n        gallery.appendChild(movieEl);\n\n        movieEl.addEventListener('click', () => {\n          openPopUp(movie, apikey);\n        });\n      });\n    } else {\n      gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n    }\n\n    renderBtn();\n  } catch (error) {\n    console.error('Błąd podczas pobierania filmów:', error);\n  }\n}\n\n// wyszukiwanie filmów\nasync function searchMovies(keyWord, page = 1) {\n  const yearParams = selectedYear\n    ? `&primary_release_year=${selectedYear}`\n    : '';\n  const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n  const apiURL = `https://api.themoviedb.org/3/search/movie?query=${keyWord}&api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n\n  try {\n    const response = await fetch(apiURL);\n    if (!response.ok) {\n      throw new Error('response was not ok');\n    }\n    const data = await response.json();\n    totalPages = data.total_pages;\n    gallery.innerHTML = '';\n\n    if (data.results.length > 0) {\n      data.results.forEach(movie => {\n        const movieEl = document.createElement('div');\n        movieEl.className = 'movie';\n\n        // Pobieranie obrazów dla danego filmu\n        fetch(\n          `https://api.themoviedb.org/3/movie/${movie.id}/images?api_key=${apikey}`\n        )\n          .then(response => response.json())\n          .then(imageData => {\n            if (imageData.posters.length > 0) {\n              const imgEl = document.createElement('img');\n              imgEl.src = `https://image.tmdb.org/t/p/w500${imageData.posters[0].file_path}`;\n              movieEl.appendChild(imgEl);\n            }\n\n            // Tytuł filmu\n            const titleEl = document.createElement('p');\n            titleEl.textContent = movie.title;\n            titleEl.className = 'movie-title';\n\n            const genresEl = document.createElement('p');\n            const genres = movie.genre_ids\n              .map(id => genresMap[id])\n              .filter(name => name)\n              .join(', ');\n            const year = movie.release_date.split('-')[0];\n            genresEl.textContent = `${genres} | ${year}`;\n            genresEl.className = 'movie-genres-year';\n\n            movieEl.appendChild(titleEl);\n            movieEl.appendChild(genresEl);\n            gallery.appendChild(movieEl);\n            movieEl.addEventListener('click', () => {\n              openPopUp(movie, apikey);\n            });\n          });\n      });\n    } else {\n      gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n    }\n\n    renderBtn();\n  } catch (error) {\n    console.error('Błąd podczas wyszukiwania filmów:', error);\n  }\n}\n\n// Gatunki filmów\nasync function fetchGenre() {\n  const urlGenre = `https://api.themoviedb.org/3/genre/movie/list?api_key=${apikey}`;\n\n  try {\n    const response = await fetch(urlGenre);\n    if (!response.ok) {\n      throw new Error('response was not ok');\n    }\n    const data = await response.json();\n\n    genresMap = {};\n    data.genres.forEach(genre => {\n      genresMap[genre.id] = genre.name;\n    });\n  } catch (error) {\n    console.error('error:', error);\n  }\n}\n\n// Inicjalizacja\nasync function init() {\n  await fetchGenre();\n  await popularMovies(); // Wyświetl popularne filmy od razu\n}\n\n// Inicjalizacja przycisku wyszukiwania\ndocument.getElementById('searchButton').addEventListener('click', async () => {\n  keyWord = document.getElementById('searchInput').value;\n  currentPage = 1; // Resetuj stronę na 1 przy nowym wyszukiwaniu\n  await searchMovies(keyWord, currentPage);\n});\n\n// Inicjalizacja krajów i lat\nselector();\npopulateYears();\ninit();","// Funkcja do otwierania pop-upu\nexport async function openPopUp(movie, apikey) {\n  const popUpContainer = document.getElementById('popUpContainer');\n  const popUpImage = document.getElementById('popUpImage');\n  const popUpDescription = document.getElementById('popUpDescription');\n\n  // Wyczyść poprzednią zawartość\n  popUpImage.innerHTML = ''; // Wyczyść poprzednie zdjęcie\n  popUpDescription.innerHTML = ''; // Wyczyść poprzedni opis\n\n  // Tworzenie elementu img dla plakatu filmu\n  const imgEl = document.createElement('img');\n  imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n  popUpImage.appendChild(imgEl);\n\n  // Pobierz gatunki filmów i mapuj je\n  const genreMap = await fetchGenres(apikey);\n  const genreNames = movie.genre_ids\n    .map(id => genreMap[id])\n    .filter(name => name); // Mapowanie ID do nazw\n\n  // Sprawdzenie, czy film jest już w bibliotece\n  const library = JSON.parse(localStorage.getItem('library')) || [];\n  const isInLibrary = library.some(item => item.id === movie.id);\n\n  // Wyświetlanie szczegółów filmu w pop-upie\n  popUpDescription.innerHTML = `\n        <h2>${movie.title}</h2>\n        <p class=\"pop-up-description-data vote\">Vote / Votes: <span class=\"vote-span\">${\n          movie.vote_average\n        }</span> / <span class=\"votes-span\">${movie.vote_count}</span></p>\n        <p class=\"pop-up-description-data popularity\">Popularity: <span class=\"popularity-span\">${\n          movie.popularity\n        }</span></p>\n        <p class=\"pop-up-description-data gendre\">Genre: <span class=\"gendre-span\">${\n          genreNames.length > 0 ? genreNames.join(', ') : 'Unknown'\n        }</span></p>\n        <p class=\"pop-up-description-data about\">ABOUT:</p>\n        <p class=\"pop-up-description-data about-desc\">${movie.overview}</p>\n        <div class=\"gradient-box\"><button class=\"buttonAddToMyLibrary\" id=\"buttonAddToMyLibrary\">${isInLibrary ? 'Remove from my library' : 'Add to my library'}</button></div>\n    `;\n\n  // Pokaż pop-up\n  popUpContainer.style.display = 'flex';\n\n  // Zamknięcie pop-upu\n  document.getElementById('closePopUp').onclick = function () {\n    popUpContainer.style.display = 'none';\n  };\n\n  // Obsługa kliknięcia przycisku \"Add to my library\"\n  const addToLibraryButton = document.getElementById('buttonAddToMyLibrary');\n  addToLibraryButton.onclick = function () {\n    addToLibrary(movie);\n\n    // Zaktualizuj tekst przycisku po kliknięciu\n    const updatedLibrary = JSON.parse(localStorage.getItem('library')) || [];\n    const isNowInLibrary = updatedLibrary.some(item => item.id === movie.id);\n    this.textContent = isNowInLibrary ? 'Remove from my library' : 'Add to my library';\n  };\n}\n\n// Funkcja do pobierania gatunków\nexport async function fetchGenres(apikey) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${apikey}&language=en-US`\n    );\n    const data = await response.json();\n\n    // Tworzenie mapy ID gatunków do nazw\n    const genreMap = {};\n    data.genres.forEach(genre => {\n      genreMap[genre.id] = genre.name;\n    });\n\n    return genreMap;\n  } catch (error) {\n    console.error('Błąd podczas pobierania gatunków:', error);\n    return {};\n  }\n}\n\n// Funkcja dodająca/odejmująca film z biblioteki\nfunction addToLibrary(movie) {\n  let library = JSON.parse(localStorage.getItem('library')) || [];\n\n  // Sprawdzenie, czy film już istnieje w bibliotece\n  const existingMovieIndex = library.findIndex(item => item.id === movie.id);\n\n  if (existingMovieIndex === -1) {\n    // Film nie istnieje, dodaj go do biblioteki\n    library.push(movie);\n    alert(`${movie.title} został dodany do Twojej biblioteki!`);\n  } else {\n    // Film już istnieje, usuń go z biblioteki\n    library.splice(existingMovieIndex, 1);\n    alert(`${movie.title} został usunięty z Twojej biblioteki!`);\n  }\n\n  // Zapisz zaktualizowaną bibliotekę w localStorage\n  localStorage.setItem('library', JSON.stringify(library));\n}\n"],"names":["$bpxeT","parcelRequire","$c24d5c3b10b9375f$export$873fe25bfa110c5b","movie","apikey","$c24d5c3b10b9375f$var$_openPopUp","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","popUpContainer","popUpImage","popUpDescription","imgEl","genreMap","genreNames","library","isInLibrary","document","getElementById","innerHTML","createElement","src","concat","poster_path","appendChild","$c24d5c3b10b9375f$export$e95d448b93b2cdb","_ctx","sent","genre_ids","map","id","filter","name","JSON","parse","localStorage","getItem","some","item","title","vote_average","vote_count","popularity","length","join","overview","style","display","onclick","$c24d5c3b10b9375f$var$addToLibrary","isNowInLibrary","textContent","$c24d5c3b10b9375f$var$_fetchGenres","response","data","fetch","json","genres","forEach","genre","console","error","t0","existingMovieIndex","findIndex","push","alert","splice","setItem","stringify","$01039996e00cb7ba$var$apikey","$01039996e00cb7ba$var$gallery","querySelector","$01039996e00cb7ba$var$currentPage","$01039996e00cb7ba$var$totalPages","$01039996e00cb7ba$var$keyWord","$01039996e00cb7ba$var$genresMap","$01039996e00cb7ba$var$_selector","countrySelect","countries","i","country","option","value","cca2","common","$01039996e00cb7ba$var$_populateYears","yearSelect","currentYear","year","Date","getFullYear","$01039996e00cb7ba$var$renderBtn","$01039996e00cb7ba$var$_renderBtn","paginationBtn","prevBtn","btn","dots","lastBtn","nextBtn","classList","add","addEventListener","$01039996e00cb7ba$var$searchMovies","$01039996e00cb7ba$var$popularMovies","Math","min","$01039996e00cb7ba$var$_popularMovies","page","regionParams","yearParams","apiUrl","_args","ok","Error","total_pages","results","movieEl","className","titleEl","genresEl","release_date","split","keyWord1","$01039996e00cb7ba$var$_searchMovies","apiURL","response1","then","imageData","posters","file_path","$01039996e00cb7ba$var$fetchGenre","$01039996e00cb7ba$var$_fetchGenre","urlGenre","$01039996e00cb7ba$var$_init","$01039996e00cb7ba$var$selector","$01039996e00cb7ba$var$populateYears","$01039996e00cb7ba$var$init"],"version":3,"file":"catalog.cddf386a.js.map"}