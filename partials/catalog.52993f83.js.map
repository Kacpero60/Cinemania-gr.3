{"mappings":"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","sources":["src/js/pop-up.js","src/js/catalog.js"],"sourcesContent":["// Funkcja do otwierania pop-upu\nexport async function openPopUp(movie, apikey) {\n    const popUpContainer = document.getElementById('popUpContainer');\n    const popUpImage = document.getElementById('popUpImage');\n    const popUpDescription = document.getElementById('popUpDescription');\n\n    // Clear previous content\n    popUpImage.innerHTML = ''; // Clear any existing image\n    popUpDescription.innerHTML = ''; // Clear any existing description\n\n    // Create an img element for the movie poster\n    const imgEl = document.createElement('img');\n    imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n    // Append the image to the pop-up image div\n    popUpImage.appendChild(imgEl);\n\n    // Fetch genres and map them\n    const genreMap = await fetchGenres(apikey);\n    const genreNames = movie.genre_ids.map(id => genreMap[id]).filter(name => name); // Map IDs to names\n\n    popUpDescription.innerHTML = `\n        <h2>${movie.title}</h2>\n        <p class=\"pop-up-description-data vote\" >Vote / Votes: <span> ${movie.vote_average} / ${movie.vote_count}</span></p>\n        <p class=\"pop-up-description-data popularity\">Popularity: <span>${movie.popularity}</span></p>\n        <p class=\"pop-up-description-data gendre\">Genre: <span>${genreNames.length > 0 ? genreNames.join(', ') : ''}</span></p>\n        <p class=\"pop-up-description-data about\"> ABOUT:</p>\n        <p class=\"pop-up-description-data about-desc\"> ${movie.overview}</p>\n        <button class=\"buttonAddToMyLibrary\" id=\"buttonAddToMyLibrary\">Add to my</button>\n    `;\n\n    // Show the pop-up\n    popUpContainer.style.display = 'flex';\n\n    console.log(movie.title);\n\n    // Close pop-up event\n    document.getElementById('closePopUp').onclick = function() {\n        popUpContainer.style.display = 'none';\n    };\n}\n\n// Funkcja do pobierania gatunków\nasync function fetchGenres(apikey) {\n    try {\n        const response = await fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${apikey}&language=en-US&`);\n        const data = await response.json();\n\n        // Tworzenie mapy ID gatunków do nazw\n        const genreMap = {};\n        data.genres.forEach(genre => {\n            genreMap[genre.id] = genre.name;\n        });\n\n        return genreMap;\n    } catch (error) {\n        console.error('Błąd podczas pobierania gatunków:', error);\n        return {};\n    }\n}","import { openPopUp } from './pop-up.js'; // Importuj funkcje z pop-up.js\n\nconst apikey = '26ee83a5e26d7fcb87f8d8380af6bd82';\nconst gallery = document.querySelector(\".gallery\");\nlet currentPage = 1;\nlet totalPages = 24;\nconst perPage = 20;\nlet keyWord = '';\nlet selectedCountry = '';\nlet selectedYear = '';\n\n// funkcja do wyboru krajów\nasync function selector() {\n    const countrySelect = document.getElementById('countrySelect');\n\n    try {\n        const response = await fetch(`https://restcountries.com/v3.1/all`);\n        const countries = await response.json();\n\n        for (let i = 0; i < countries.length; i++) {\n            const country = countries[i];\n            const option = document.createElement('option');\n            option.value = country.cca2;\n            option.textContent = country.name.common;\n            countrySelect.appendChild(option);\n        }\n    } catch (error) {\n        console.error('Błąd podczas pobierania krajów:', error);\n    }\n}\n\n// funkcja do wyboru lat\nasync function populateYears() {\n    const yearSelect = document.getElementById('yearSelect');\n    const currentYear = new Date().getFullYear();\n\n    for (let year = currentYear; year >= 1980; year--) {\n        const option = document.createElement('option');\n        option.value = year;\n        option.textContent = year;\n        yearSelect.appendChild(option);\n    }\n}\n\n// renderowanie przycisków paginacji\nasync function renderBtn() {\n    const paginationBtn = document.getElementById('pagination');\n    paginationBtn.innerHTML = '';\n\n    // przycisk do cofania\n    if (currentPage >= 1) {\n        const prevBtn = document.createElement('button');\n        prevBtn.textContent = '<';\n        prevBtn.classList.add('prevnext-btn');\n\n        prevBtn.addEventListener('click', () => {\n            currentPage--;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(prevBtn);\n    }\n\n    // wyświetlanie pierwszych trzech stron\n    for (let i = 1; i <= Math.min(3, totalPages); i++) {\n        const btn = document.createElement('button');\n        btn.textContent = i;\n        btn.classList.add('pagination-btn');\n\n        if (i === currentPage) {\n            btn.classList.add('active');\n        }\n\n        btn.addEventListener('click', () => {\n            currentPage = i;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(btn);\n    }\n\n    // kropki, jeśli jest więcej niż 3 strony\n    if (totalPages > 3) {\n        const dots = document.createElement('div');\n        dots.textContent = '...';\n        paginationBtn.appendChild(dots);\n        dots.classList.add('dots');\n\n        // wyświetlenie ostatniej strony\n        const lastBtn = document.createElement('button');\n        lastBtn.textContent = 24;\n        lastBtn.classList.add('pagination-btn');\n\n        lastBtn.addEventListener('click', () => {\n            currentPage = 24;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(lastBtn);\n    }\n\n    // przycisk do następnej strony\n    if (currentPage < totalPages) {\n        const nextBtn = document.createElement('button');\n        nextBtn.textContent = '>';\n        nextBtn.classList.add('prevnext-btn');\n\n        nextBtn.addEventListener('click', () => {\n            currentPage++;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(nextBtn);\n    }\n}\n\n// pobieranie popularnych filmów\nasync function popularMovies(page = 1) {\n    const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n    const yearParams = selectedYear ? `&primary_release_year=${selectedYear}` : '';\n    const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n\n    try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n            throw new Error('response was not ok');\n        }\n        const data = await response.json();\n        totalPages = data.total_pages;\n        gallery.innerHTML = '';\n\n        if (data.results.length > 0) {\n            data.results.forEach(movie => {\n                const movieEl = document.createElement('div');\n                movieEl.className = 'movie';\n\n                const imgEl = document.createElement('img');\n                imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n                const titleEl = document.createElement('p');\n                titleEl.textContent = movie.title;\n                titleEl.className = 'movie-title';\n\n                movieEl.appendChild(imgEl);\n                movieEl.appendChild(titleEl);\n                gallery.appendChild(movieEl);\n\n                movieEl.addEventListener(\"click\", () => {\n                    openPopUp(movie, apikey);\n                });\n            });\n        } else {\n            gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n        }\n\n        renderBtn();\n    } catch (error) {\n        console.error('Błąd podczas pobierania filmów:', error);\n    }\n}\n\n// wyszukiwanie filmów po wpisaniu frazy\nasync function searchMovies(keyWord, page = 1) {\n    const yearParams = selectedYear ? `&primary_release_year=${selectedYear}` : '';\n    const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n    const apiURL = `https://api.themoviedb.org/3/search/movie?query=${keyWord}&api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n\n    try {\n        const response = await fetch(apiURL);\n        if (!response.ok) {\n            throw new Error('response was not ok');\n        }\n        const data = await response.json();\n        totalPages = data.total_pages;\n        gallery.innerHTML = '';\n\n        if (data.results.length > 0) {\n            for (const movie of data.results) {\n                const movieEl = document.createElement('div');\n                movieEl.className = 'movie';\n\n                const imgEl = document.createElement('img');\n                imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n                const titleEl = document.createElement('p');\n                titleEl.textContent = movie.title;\n                titleEl.className = 'movie-title';\n\n                movieEl.appendChild(imgEl);\n                movieEl.appendChild(titleEl);\n                gallery.appendChild(movieEl);\n            }\n        } else {\n            gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n        }\n\n        renderBtn();\n    } catch (error) {\n        console.error('Błąd podczas wyszukiwania filmów:', error);\n    }\n}\n\n// wyszukiwanie po kliknięciu przycisku\ndocument.getElementById('searchButton').addEventListener('click', function(event) {\n    event.preventDefault();\n\n    keyWord = document.getElementById('searchInput').value;\n    selectedYear = document.getElementById('yearSelect').value;\n    selectedCountry = document.getElementById('countrySelect').value;\n\n    if (keyWord === \"\") {\n        return;\n    }\n\n    currentPage = 1;\n    searchMovies(keyWord);\n});\n\n// ładowanie popularnych filmów po załadowaniu strony\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    populateYears();\n    selector();\n    popularMovies(currentPage);\n});\n"],"names":["async","$0244a5a1b3e8d0b6$export$873fe25bfa110c5b","movie","apikey","popUpContainer","document","getElementById","popUpImage","popUpDescription","innerHTML","imgEl","createElement","src","poster_path","appendChild","genreMap","response","fetch","data","json","genres","forEach","genre","id","name","error","console","$0244a5a1b3e8d0b6$var$fetchGenres","genreNames","genre_ids","map","filter","title","vote_average","vote_count","popularity","length","join","overview","style","display","log","onclick","$9f350005b1f9b186$var$gallery","querySelector","$9f350005b1f9b186$var$currentPage","$9f350005b1f9b186$var$totalPages","$9f350005b1f9b186$var$keyWord","$9f350005b1f9b186$var$selectedCountry","$9f350005b1f9b186$var$selectedYear","$9f350005b1f9b186$var$renderBtn","paginationBtn","prevBtn","textContent","classList","add","addEventListener","$9f350005b1f9b186$var$searchMovies","$9f350005b1f9b186$var$popularMovies","i","Math","min","btn","dots","lastBtn","nextBtn","page","apiUrl","ok","Error","total_pages","results","movieEl","className","titleEl","keyWord1","apiURL","event","preventDefault","value","yearSelect","year","Date","getFullYear","option","$9f350005b1f9b186$var$populateYears","countrySelect","countries","country","cca2","common","$9f350005b1f9b186$var$selector"],"version":3,"file":"catalog.52993f83.js.map"}