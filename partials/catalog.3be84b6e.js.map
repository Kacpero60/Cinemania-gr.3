{"mappings":"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","sources":["src/js/pop-up.js","src/js/catalog.js"],"sourcesContent":["// Funkcja do otwierania pop-upu\nexport async function openPopUp(movie, apikey) {\n    const popUpContainer = document.getElementById('popUpContainer');\n    const popUpImage = document.getElementById('popUpImage');\n    const popUpDescription = document.getElementById('popUpDescription');\n\n    // Clear previous content\n    popUpImage.innerHTML = ''; // Clear any existing image\n    popUpDescription.innerHTML = ''; // Clear any existing description\n\n    // Create an img element for the movie poster\n    const imgEl = document.createElement('img');\n    imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n    // Append the image to the pop-up image div\n    popUpImage.appendChild(imgEl);\n\n    // Fetch genres and map them\n    const genreMap = await fetchGenres(apikey);\n    const genreNames = movie.genre_ids.map(id => genreMap[id]).filter(name => name); // Map IDs to names\n\n    popUpDescription.innerHTML = `\n        <h2>${movie.title}</h2>\n        <p class=\"pop-up-description-data vote\" >Vote / Votes: <span> ${movie.vote_average} / ${movie.vote_count}</span></p>\n        <p class=\"pop-up-description-data popularity\">Popularity: <span>${movie.popularity}</span></p>\n        <p class=\"pop-up-description-data gendre\">Genre: <span>${genreNames.length > 0 ? genreNames.join(', ') : ''}</span></p>\n        <p class=\"pop-up-description-data about\"> ABOUT:</p>\n        <p class=\"pop-up-description-data about-desc\"> ${movie.overview}</p>\n        <button class=\"buttonAddToMyLibrary\" id=\"buttonAddToMyLibrary\">Add to my</button>\n    `;\n\n    // Show the pop-up\n    popUpContainer.style.display = 'flex';\n\n    console.log(movie.title);\n\n    // Close pop-up event\n    document.getElementById('closePopUp').onclick = function() {\n        popUpContainer.style.display = 'none';\n    };\n}\n\n// Funkcja do pobierania gatunków\nasync function fetchGenres(apikey) {\n    try {\n        const response = await fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${apikey}&language=en-US&`);\n        const data = await response.json();\n\n        // Tworzenie mapy ID gatunków do nazw\n        const genreMap = {};\n        data.genres.forEach(genre => {\n            genreMap[genre.id] = genre.name;\n        });\n\n        return genreMap;\n    } catch (error) {\n        console.error('Błąd podczas pobierania gatunków:', error);\n        return {};\n    }\n}","import { openPopUp } from './pop-up.js'; // Importuj funkcje z pop-up.js\n\nconst apikey = '26ee83a5e26d7fcb87f8d8380af6bd82';\nconst gallery = document.querySelector(\".gallery\");\nlet currentPage = 1;\nlet totalPages = 24;\nconst perPage = 20;\nlet keyWord = '';\nlet selectedCountry = '';\nlet selectedYear = '';\nlet genresMap = {};\n\n// Funkcja do wyboru krajów\nasync function selector() {\n    const countrySelect = document.getElementById('countrySelect');\n\n    try {\n        const response = await fetch(`https://restcountries.com/v3.1/all`);\n        const countries = await response.json();\n\n        for (let i = 0; i < countries.length; i++) {\n            const country = countries[i];\n            const option = document.createElement('option');\n            option.value = country.cca2;\n            option.textContent = country.name.common;\n            countrySelect.appendChild(option);\n        }\n    } catch (error) {\n        console.error('Błąd podczas pobierania krajów:', error);\n    }\n}\n\n// Funkcja do wyboru lat\nasync function populateYears() {\n    const yearSelect = document.getElementById('yearSelect');\n    const currentYear = new Date().getFullYear();\n\n    for (let year = currentYear; year >= 1980; year--) {\n        const option = document.createElement('option');\n        option.value = year;\n        option.textContent = year;\n        yearSelect.appendChild(option);\n    }\n}\n\n// Renderowanie przycisków paginacji\nasync function renderBtn() {\n    const paginationBtn = document.getElementById('pagination');\n    paginationBtn.innerHTML = '';\n\n    // przycisk do cofania\n    if (currentPage > 1) {\n        const prevBtn = document.createElement('button');\n        prevBtn.textContent = '<';\n        prevBtn.classList.add('prevnext-btn');\n        prevBtn.addEventListener('click', () => {\n            currentPage--;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(prevBtn);\n    }\n\n    // wyświetlanie pierwszych trzech stron\n    for (let i = 1; i <= Math.min(3, totalPages); i++) {\n        const btn = document.createElement('button');\n        btn.textContent = i;\n        btn.classList.add('pagination-btn');\n        \n        if (i === currentPage) {\n            btn.classList.add('active');\n        }\n\n        btn.addEventListener('click', () => {\n            currentPage = i;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(btn);\n    }\n\n    // kropki, jeśli jest więcej niż 3 strony\n    if (totalPages > 3) {\n        const dots = document.createElement('div');\n        dots.textContent = '...';\n        dots.classList.add('dots');\n        paginationBtn.appendChild(dots);\n\n        // wyświetlenie ostatniej strony\n        const lastBtn = document.createElement('button');\n        lastBtn.textContent = totalPages;\n        lastBtn.classList.add('pagination-btn');\n        lastBtn.addEventListener('click', () => {\n            currentPage = totalPages;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(lastBtn);\n    }\n\n    // przycisk do następnej strony\n    if (currentPage < totalPages) {\n        const nextBtn = document.createElement('button');\n        nextBtn.textContent = '>';\n        nextBtn.classList.add('prevnext-btn');\n        nextBtn.addEventListener('click', () => {\n            currentPage++;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(nextBtn);\n    }\n}\n\n// pobieranie popularnych filmów\nasync function popularMovies(page = 1) {\n    const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n    const yearParams = selectedYear ? `&primary_release_year=${selectedYear}` : '';\n    const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n\n    try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n            throw new Error('response was not ok');\n        }\n        const data = await response.json();\n        totalPages = data.total_pages;\n        gallery.innerHTML = '';\n\n        if (data.results.length > 0) {\n            data.results.forEach(movie => {\n                const movieEl = document.createElement('div');\n                movieEl.className = 'movie';\n\n                const imgEl = document.createElement('img');\n                imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n                const titleEl = document.createElement('p');\n                titleEl.textContent = movie.title;\n                titleEl.className = 'movie-title';\n\n                const genresEl = document.createElement('p');\n                const genres = movie.genre_ids.map(id => genresMap[id]).filter(name => name).join(', ');\n                const year = movie.release_date.split('-')[0];\n                genresEl.textContent = `${genres} | ${year}`;\n                genresEl.className = 'movie-genres-year';\n\n                movieEl.appendChild(imgEl);\n                movieEl.appendChild(titleEl);\n                movieEl.appendChild(genresEl);\n                gallery.appendChild(movieEl);\n\n                movieEl.addEventListener(\"click\", () => {\n                    openPopUp(movie, apikey);\n                });\n            });\n        } else {\n            gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n        }\n\n        renderBtn();\n    } catch (error) {\n        console.error('Błąd podczas pobierania filmów:', error);\n    }\n}\n\n// wyszukiwanie filmów\nasync function searchMovies(keyWord, page = 1) {\n    const yearParams = selectedYear ? `&primary_release_year=${selectedYear}` : '';\n    const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n    const apiURL = `https://api.themoviedb.org/3/search/movie?query=${keyWord}&api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n\n    try {\n        const response = await fetch(apiURL);\n        if (!response.ok) {\n            throw new Error('response was not ok');\n        }\n        const data = await response.json();\n        totalPages = data.total_pages;\n        gallery.innerHTML = '';\n\n        if (data.results.length > 0) {\n            data.results.forEach(movie => {\n                const movieEl = document.createElement('div');\n                movieEl.className = 'movie';\n\n                const imgEl = document.createElement('img');\n                imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n                const titleEl = document.createElement('p');\n                titleEl.textContent = movie.title;\n                titleEl.className = 'movie-title';\n\n                movieEl.appendChild(imgEl);\n                movieEl.appendChild(titleEl);\n                gallery.appendChild(movieEl);\n            });\n        } else {\n            gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n        }\n\n        renderBtn();\n    } catch (error) {\n        console.error('Błąd podczas wyszukiwania filmów:', error);\n    }\n}\n\n// Inicjalizacja\nasync function init() {\n    await fetchGenre();\n    await selector();\n    await populateYears();\n    popularMovies(currentPage); // Domyślnie załaduj popularne filmy\n}\n\ninit();\n"],"names":["async","$0244a5a1b3e8d0b6$export$873fe25bfa110c5b","movie","apikey","popUpContainer","document","getElementById","popUpImage","popUpDescription","innerHTML","imgEl","createElement","src","poster_path","appendChild","genreMap","response","fetch","data","json","genres","forEach","genre","id","name","error","console","$0244a5a1b3e8d0b6$var$fetchGenres","genreNames","genre_ids","map","filter","title","vote_average","vote_count","popularity","length","join","overview","style","display","log","onclick","$9f350005b1f9b186$var$gallery","querySelector","$9f350005b1f9b186$var$currentPage","$9f350005b1f9b186$var$totalPages","$9f350005b1f9b186$var$genresMap","$9f350005b1f9b186$var$renderBtn","paginationBtn","prevBtn","textContent","classList","add","addEventListener","$9f350005b1f9b186$var$popularMovies","i","Math","min","btn","dots","lastBtn","nextBtn","page","apiUrl","ok","Error","total_pages","results","movieEl","className","titleEl","genresEl","year","release_date","split","fetchGenre","countrySelect","countries","country","option","value","cca2","common","$9f350005b1f9b186$var$selector","yearSelect","Date","getFullYear","$9f350005b1f9b186$var$populateYears","$9f350005b1f9b186$var$init"],"version":3,"file":"catalog.3be84b6e.js.map"}