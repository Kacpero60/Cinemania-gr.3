{"mappings":"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","sources":["src/js/pop-up-movie.js","src/js/catalog.js"],"sourcesContent":["// Funkcja do otwierania pop-upu\nexport async function openPopUp(movie, apikey) {\n    const popUpContainer = document.getElementById('popUpContainer');\n    const popUpImage = document.getElementById('popUpImage');\n    const popUpDescription = document.getElementById('popUpDescription');\n  \n    // Wyczyść poprzednią zawartość\n    popUpImage.innerHTML = '';\n    popUpDescription.innerHTML = '';\n  \n    // Tworzenie elementu img dla plakatu filmu\n    const imgEl = document.createElement('img');\n    imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n    popUpImage.appendChild(imgEl);\n  \n    // Pobierz gatunki filmów\n    const genreMap = await fetchGenres(apikey);\n    const genreNames = movie.genre_ids.map(id => genreMap[id]).filter(name => name); // Mapowanie ID do nazw\n  \n    // Sprawdzenie, czy film jest już w bibliotece\n    const library = JSON.parse(localStorage.getItem('library')) || [];\n    const isInLibrary = library.some(item => item.id === movie.id);\n  \n    popUpDescription.innerHTML = `\n        <h2>${movie.title}</h2>\n        <p class=\"pop-up-description-data vote\">Vote / Votes: <span>${movie.vote_average} / ${movie.vote_count}</span></p>\n        <p class=\"pop-up-description-data popularity\">Popularity: <span>${movie.popularity}</span></p>\n        <p class=\"pop-up-description-data genre\">Genre: <span>${genreNames.length > 0 ? genreNames.join(', ') : ''}</span></p>\n        <p class=\"pop-up-description-data about\">ABOUT:</p>\n        <p class=\"pop-up-description-data about-desc\">${movie.overview}</p>\n        <button class=\"buttonAddToMyLibrary\" id=\"buttonAddToMyLibrary\">${isInLibrary ? 'Remove from my library' : 'Add to my library'}</button>\n    `;\n  \n    // Pokaż pop-up\n    popUpContainer.style.display = 'flex';\n  \n    // Zamknij pop-up po kliknięciu przycisku zamknięcia\n    document.getElementById('closePopUp').onclick = function () {\n      popUpContainer.style.display = 'none';\n    };\n  \n    // Obsługa kliknięcia przycisku \"Add to my library\"\n    const addToLibraryButton = document.getElementById('buttonAddToMyLibrary');\n    addToLibraryButton.onclick = function() {\n        addToLibrary(movie);\n        // Zaktualizuj tekst przycisku\n        const updatedLibrary = JSON.parse(localStorage.getItem('library')) || [];\n        const isNowInLibrary = updatedLibrary.some(item => item.id === movie.id);\n        this.textContent = isNowInLibrary ? 'Remove from my library' : 'Add to my library';\n    };\n}\n\n// Funkcja do pobierania gatunków\nexport async function fetchGenres(apikey) {\n    try {\n      const response = await fetch(\n        `https://api.themoviedb.org/3/genre/movie/list?api_key=${apikey}&language=en-US`\n      );\n      const data = await response.json();\n  \n      // Tworzenie mapy ID gatunków do nazw\n      const genreMap = {};\n      data.genres.forEach(genre => {\n        genreMap[genre.id] = genre.name;\n      });\n  \n      return genreMap;\n    } catch (error) {\n      console.error('Błąd podczas pobierania gatunków:', error);\n      return {};\n    }\n}\n\n// Funkcja dodająca/odejmująca film z biblioteki\nfunction addToLibrary(movie) {\n    let library = JSON.parse(localStorage.getItem('library')) || [];\n    \n    // Sprawdzenie, czy film już istnieje w bibliotece\n    const existingMovieIndex = library.findIndex(item => item.id === movie.id);\n    \n    if (existingMovieIndex === -1) {\n        // Film nie istnieje, dodaj go\n        library.push(movie);\n        alert(`${movie.title} został dodany do Twojej biblioteki!`);\n    } else {\n        // Film już istnieje, usuń go\n        library.splice(existingMovieIndex, 1);\n        alert(`${movie.title} został usunięty z Twojej biblioteki!`);\n    }\n    \n    // Zapisz zaktualizowaną bibliotekę w localStorage\n    localStorage.setItem('library', JSON.stringify(library));\n}\n","import { openPopUp, fetchGenres } from './pop-up-movie.js'; // Importuj funkcje z pop-up.js\n\nconst apikey = '26ee83a5e26d7fcb87f8d8380af6bd82';\nconst gallery = document.querySelector('.gallery');\nlet currentPage = 1;\nlet totalPages = 24;\nlet keyWord = '';\nlet selectedCountry = '';\nlet selectedYear = '';\nlet genresMap = {};\n\n// Funkcja do wyboru krajów\nasync function selector() {\n  const countrySelect = document.getElementById('countrySelect');\n\n  try {\n    const response = await fetch(`https://restcountries.com/v3.1/all`);\n    const countries = await response.json();\n\n    for (let i = 0; i < countries.length; i++) {\n      const country = countries[i];\n      const option = document.createElement('option');\n      option.value = country.cca2;\n      option.textContent = country.name.common;\n      countrySelect.appendChild(option);\n    }\n  } catch (error) {\n    console.error('Błąd podczas pobierania krajów:', error);\n  }\n}\n\n// Funkcja do wyboru lat\nasync function populateYears() {\n  const yearSelect = document.getElementById('yearSelect');\n  const currentYear = new Date().getFullYear();\n\n  for (let year = currentYear; year >= 1980; year--) {\n    const option = document.createElement('option');\n    option.value = year;\n    option.textContent = year;\n    yearSelect.appendChild(option);\n  }\n}\n\n// Renderowanie przycisków paginacji\nasync function renderBtn() {\n  const paginationBtn = document.getElementById('pagination');\n  paginationBtn.innerHTML = '';\n\n  // przycisk do cofania\n  if (currentPage >= 1) {\n    const prevBtn = document.createElement('button');\n    prevBtn.textContent = '<';\n    prevBtn.classList.add('prevnext-btn');\n\n    prevBtn.addEventListener('click', () => {\n      currentPage--;\n      keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n      renderBtn();\n    });\n    paginationBtn.appendChild(prevBtn);\n  }\n\n  // wyświetlanie pierwszych trzech stron\n  for (let i = 1; i <= Math.min(3, totalPages); i++) {\n    const btn = document.createElement('button');\n    btn.textContent = i;\n    btn.classList.add('pagination-btn');\n\n    if (i === currentPage) {\n      btn.classList.add('active');\n    }\n\n    btn.addEventListener('click', () => {\n      currentPage = i;\n      keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n      renderBtn();\n    });\n    paginationBtn.appendChild(btn);\n  }\n\n  // kropki, jeśli jest więcej niż 3 strony\n  if (totalPages > 3) {\n    const dots = document.createElement('div');\n    dots.textContent = '...';\n    dots.classList.add('dots');\n    paginationBtn.appendChild(dots);\n\n    // wyświetlenie ostatniej strony\n    const lastBtn = document.createElement('button');\n    lastBtn.textContent = totalPages;\n    lastBtn.classList.add('pagination-btn');\n    lastBtn.addEventListener('click', () => {\n      currentPage = totalPages;\n      keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n      renderBtn();\n    });\n    paginationBtn.appendChild(lastBtn);\n  }\n\n  // przycisk do następnej strony\n  if (currentPage < totalPages) {\n    const nextBtn = document.createElement('button');\n    nextBtn.textContent = '>';\n    nextBtn.classList.add('prevnext-btn');\n    nextBtn.addEventListener('click', () => {\n      currentPage++;\n      keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n      renderBtn();\n    });\n    paginationBtn.appendChild(nextBtn);\n  }\n}\n\n// pobieranie popularnych filmów\nasync function popularMovies(page = 1) {\n  const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n  const yearParams = selectedYear\n    ? `&primary_release_year=${selectedYear}`\n    : '';\n  const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n\n  try {\n    const response = await fetch(apiUrl);\n    if (!response.ok) {\n      throw new Error('response was not ok');\n    }\n    const data = await response.json();\n    totalPages = data.total_pages;\n    gallery.innerHTML = '';\n\n    if (data.results.length > 0) {\n      data.results.forEach(movie => {\n        const movieEl = document.createElement('div');\n        movieEl.className = 'movie';\n\n        const imgEl = document.createElement('img');\n        imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n        const titleEl = document.createElement('p');\n        titleEl.textContent = movie.title;\n        titleEl.className = 'movie-title';\n\n        const genresEl = document.createElement('p');\n        const genres = movie.genre_ids\n          .map(id => genresMap[id])\n          .filter(name => name)\n          .join(', ');\n        const year = movie.release_date.split('-')[0];\n        genresEl.textContent = `${genres} | ${year}`;\n        genresEl.className = 'movie-genres-year';\n\n        movieEl.appendChild(imgEl);\n        movieEl.appendChild(titleEl);\n        movieEl.appendChild(genresEl);\n        gallery.appendChild(movieEl);\n\n        movieEl.addEventListener('click', () => {\n          openPopUp(movie, apikey);\n        });\n      });\n    } else {\n      gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n    }\n\n    renderBtn();\n  } catch (error) {\n    console.error('Błąd podczas pobierania filmów:', error);\n  }\n}\n\n// wyszukiwanie filmów\nasync function searchMovies(keyWord, page = 1) {\n  const yearParams = selectedYear\n    ? `&primary_release_year=${selectedYear}`\n    : '';\n  const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n  const apiURL = `https://api.themoviedb.org/3/search/movie?query=${keyWord}&api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n\n  try {\n    const response = await fetch(apiURL);\n    if (!response.ok) {\n      throw new Error('response was not ok');\n    }\n    const data = await response.json();\n    totalPages = data.total_pages;\n    gallery.innerHTML = '';\n\n    if (data.results.length > 0) {\n      data.results.forEach(movie => {\n        const movieEl = document.createElement('div');\n        movieEl.className = 'movie';\n\n        // Pobieranie obrazów dla danego filmu\n        fetch(\n          `https://api.themoviedb.org/3/movie/${movie.id}/images?api_key=${apikey}`\n        )\n          .then(response => response.json())\n          .then(imageData => {\n            if (imageData.posters.length > 0) {\n              const imgEl = document.createElement('img');\n              imgEl.src = `https://image.tmdb.org/t/p/w500${imageData.posters[0].file_path}`;\n              movieEl.appendChild(imgEl);\n            }\n\n            // Tytuł filmu\n            const titleEl = document.createElement('p');\n            titleEl.textContent = movie.title;\n            titleEl.className = 'movie-title';\n\n            const genresEl = document.createElement('p');\n            const genres = movie.genre_ids\n              .map(id => genresMap[id])\n              .filter(name => name)\n              .join(', ');\n            const year = movie.release_date.split('-')[0];\n            genresEl.textContent = `${genres} | ${year}`;\n            genresEl.className = 'movie-genres-year';\n\n            movieEl.appendChild(titleEl);\n            movieEl.appendChild(genresEl);\n            gallery.appendChild(movieEl);\n            movieEl.addEventListener('click', () => {\n              openPopUp(movie, apikey);\n            });\n          });\n      });\n    } else {\n      gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n    }\n\n    renderBtn();\n  } catch (error) {\n    console.error('Błąd podczas wyszukiwania filmów:', error);\n  }\n}\n\n// Gatunki filmów\nasync function fetchGenre() {\n  const urlGenre = `https://api.themoviedb.org/3/genre/movie/list?api_key=${apikey}`;\n\n  try {\n    const response = await fetch(urlGenre);\n    if (!response.ok) {\n      throw new Error('response was not ok');\n    }\n    const data = await response.json();\n\n    genresMap = {};\n    data.genres.forEach(genre => {\n      genresMap[genre.id] = genre.name;\n    });\n  } catch (error) {\n    console.error('error:', error);\n  }\n}\n\n// Inicjalizacja\nasync function init() {\n  await fetchGenre();\n  await popularMovies(); // Wyświetl popularne filmy od razu\n}\n\n// Inicjalizacja przycisku wyszukiwania\ndocument.getElementById('searchButton').addEventListener('click', async () => {\n  keyWord = document.getElementById('searchInput').value;\n  currentPage = 1; // Resetuj stronę na 1 przy nowym wyszukiwaniu\n  await searchMovies(keyWord, currentPage);\n});\n\n// Inicjalizacja krajów i lat\nselector();\npopulateYears();\ninit();"],"names":["async","$8fe7e0a8c2d3fdf2$export$873fe25bfa110c5b","movie","apikey","popUpContainer","document","getElementById","popUpImage","popUpDescription","innerHTML","imgEl","createElement","src","poster_path","appendChild","genreMap","response","fetch","data","json","genres","forEach","genre","id","name","error","console","$8fe7e0a8c2d3fdf2$export$e95d448b93b2cdb","genreNames","genre_ids","map","filter","isInLibrary","JSON","parse","localStorage","getItem","some","item","title","vote_average","vote_count","popularity","length","join","overview","style","display","onclick","library","existingMovieIndex","findIndex","push","alert","splice","setItem","stringify","$8fe7e0a8c2d3fdf2$var$addToLibrary","isNowInLibrary","this","textContent","$9f350005b1f9b186$var$gallery","querySelector","$9f350005b1f9b186$var$currentPage","$9f350005b1f9b186$var$totalPages","$9f350005b1f9b186$var$keyWord","$9f350005b1f9b186$var$genresMap","$9f350005b1f9b186$var$renderBtn","paginationBtn","prevBtn","classList","add","addEventListener","$9f350005b1f9b186$var$searchMovies","$9f350005b1f9b186$var$popularMovies","i","Math","min","btn","dots","lastBtn","nextBtn","page","apiUrl","ok","Error","total_pages","results","movieEl","className","titleEl","genresEl","year","release_date","split","keyWord1","apiURL","response1","then","imageData","posters","file_path","value","countrySelect","countries","country","option","cca2","common","$9f350005b1f9b186$var$selector","yearSelect","Date","getFullYear","$9f350005b1f9b186$var$populateYears","$9f350005b1f9b186$var$fetchGenre","$9f350005b1f9b186$var$init"],"version":3,"file":"catalog.d95f1437.js.map"}