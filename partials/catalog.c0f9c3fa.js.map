{"mappings":"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","sources":["src/js/catalog.js","src/js/pop-up-movie.js"],"sourcesContent":["import { openPopUp, fetchGenres } from './pop-up-movie.js'; // Importuj funkcje z pop-up.js\n\nconst apikey = '26ee83a5e26d7fcb87f8d8380af6bd82';\nconst gallery = document.querySelector(\".gallery\");\nlet currentPage = 1;\nlet totalPages = 24;\nconst perPage = 20;\nlet keyWord = '';\nlet selectedCountry = '';\nlet selectedYear = '';\nlet genresMap = {};\n\n// Funkcja do wyboru krajów\nasync function selector() {\n    const countrySelect = document.getElementById('countrySelect');\n    \n    try {\n        const response = await fetch(`https://restcountries.com/v3.1/all`);\n        const countries = await response.json();\n\n        for (let i = 0; i < countries.length; i++) {\n            const country = countries[i];\n            const option = document.createElement('option');\n            option.value = country.cca2;\n            option.textContent = country.name.common;\n            countrySelect.appendChild(option);\n        }\n    } catch (error) {\n        console.error('Błąd podczas pobierania krajów:', error);\n    }\n}\n\n// Funkcja do wyboru lat\nasync function populateYears() {\n    const yearSelect = document.getElementById('yearSelect');\n    const currentYear = new Date().getFullYear();\n\n    for (let year = currentYear; year >= 1980; year--) {\n        const option = document.createElement('option');\n        option.value = year;\n        option.textContent = year;\n        yearSelect.appendChild(option);\n    }\n}\n\n// Renderowanie przycisków paginacji\nasync function renderBtn() {\n    const paginationBtn = document.getElementById('pagination');\n    paginationBtn.innerHTML = '';\n\n    // przycisk do cofania\n    if (currentPage >= 1) {\n        const prevBtn = document.createElement('button');\n        prevBtn.textContent = '<';\n        prevBtn.classList.add('prevnext-btn');\n\n        prevBtn.addEventListener('click', () => {\n            currentPage--;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(prevBtn);\n    }\n\n    // wyświetlanie pierwszych trzech stron\n    for (let i = 1; i <= Math.min(3, totalPages); i++) {\n        const btn = document.createElement('button');\n        btn.textContent = i;\n        btn.classList.add('pagination-btn');\n        \n        if (i === currentPage) {\n            btn.classList.add('active');\n        }\n\n        btn.addEventListener('click', () => {\n            currentPage = i;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(btn);\n    }\n\n    // kropki, jeśli jest więcej niż 3 strony\n    if (totalPages > 3) {\n        const dots = document.createElement('div');\n        dots.textContent = '...';\n        dots.classList.add('dots');\n        paginationBtn.appendChild(dots);\n\n        // wyświetlenie ostatniej strony\n        const lastBtn = document.createElement('button');\n        lastBtn.textContent = 24;\n        lastBtn.classList.add('pagination-btn');\n        lastBtn.addEventListener('click', () => {\n            currentPage = 24;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(lastBtn);\n    }\n\n    // przycisk do następnej strony\n    if (currentPage < totalPages) {\n        const nextBtn = document.createElement('button');\n        nextBtn.textContent = '>';\n        nextBtn.classList.add('prevnext-btn');\n        nextBtn.addEventListener('click', () => {\n            currentPage++;\n            keyWord ? searchMovies(keyWord, currentPage) : popularMovies(currentPage);\n            renderBtn();\n        });\n        paginationBtn.appendChild(nextBtn);\n    }\n}\n\n// pobieranie popularnych filmów\nasync function popularMovies(page = 1) {\n    const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n    const yearParams = selectedYear ? `&primary_release_year=${selectedYear}` : '';\n    const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n    \n    try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n            throw new Error('response was not ok');\n        }\n        const data = await response.json();\n        totalPages = data.total_pages;\n        gallery.innerHTML = '';\n\n        if (data.results.length > 0) {\n            data.results.forEach(movie => {\n                const movieEl = document.createElement('div');\n                movieEl.className = 'movie';\n\n                const imgEl = document.createElement('img');\n\n               imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n                const titleEl = document.createElement('p');\n                titleEl.textContent = movie.title;\n                titleEl.className = 'movie-title';\n                \n                const genresEl = document.createElement('p');\n                const genres = movie.genre_ids.map(id => genresMap[id]).filter(name => name).join(', ');\n                const year = movie.release_date.split('-')[0];\n                genresEl.textContent = `${genres} | ${year}`;\n                genresEl.className = 'movie-genres-year';\n                \n                movieEl.appendChild(imgEl);\n                movieEl.appendChild(titleEl);\n                movieEl.appendChild(genresEl);\n                gallery.appendChild(movieEl);\n                \n                movieEl.addEventListener(\"click\", () => {\n                    openPopUp(movie, apikey);\n                });\n            });\n        } else {\n            gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n        }\n\n        renderBtn();\n    } catch (error) {\n        console.error('Błąd podczas pobierania filmów:', error);\n    }\n}\n\n// wyszukiwanie filmów\nasync function searchMovies(keyWord, page = 1) {\n    const yearParams = selectedYear ? `&primary_release_year=${selectedYear}` : '';\n    const regionParams = selectedCountry ? `&region=${selectedCountry}` : '';\n    const apiURL = `https://api.themoviedb.org/3/search/movie?query=${keyWord}&api_key=${apikey}&language=en-US&include_adult=false&page=${page}${regionParams}${yearParams}`;\n    \n    try {\n        const response = await fetch(apiURL);\n        if (!response.ok) {\n            throw new Error('response was not ok');\n        }\n        const data = await response.json();\n        totalPages = data.total_pages;\n        gallery.innerHTML = '';\n        \n        if (data.results.length > 0) {\n            data.results.forEach(movie => {\n                const movieEl = document.createElement('div');\n                movieEl.className = 'movie';\n                \n                // Pobieranie obrazów dla danego filmu\n                const imageResponse = fetch(`https://api.themoviedb.org/3/movie/${movie.id}/images?api_key=${apikey}`);\n                const imageData = imageResponse.json();\n                \n                // Sprawdzanie, czy są dostępne postery\n                if (imageData.posters.length > 0) {\n                    const imgEl = document.createElement('img');\n                    imgEl.src = `https://image.tmdb.org/t/p/w500${imageData.posters[0].file_path}`; \n                    movieEl.appendChild(imgEl);\n                }\n\n                // Tytuł filmu\n                const titleEl = document.createElement('p');\n                titleEl.textContent = movie.title;\n                titleEl.className = 'movie-title';\n                \n                const genresEl = document.createElement('p');\n                const genres = movie.genre_ids.map(id => genresMap[id]).filter(name => name).join(', ');\n                const year = movie.release_date.split('-')[0];\n                genresEl.textContent = `${genres} | ${year}`;\n                genresEl.className = 'movie-genres-year';\n                \n            \n                movieEl.appendChild(imgEl);\n                movieEl.appendChild(titleEl);\n                gallery.appendChild(movieEl);\n                movieEl.appendChild(genresEl);\n            });\n        } else {\n            gallery.textContent = 'OOPS... Brak wyników pasujących do wyszukiwania.';\n        }\n\n        renderBtn();\n    } catch (error) {\n        console.error('Błąd podczas wyszukiwania filmów:', error);\n    }\n}\n\n// Gatunki filmów\nasync function fetchGenre() {\n    const urlGenre = `https://api.themoviedb.org/3/genre/movie/list?api_key=${apikey}`;\n    \n    try {\n        const response = await fetch(urlGenre);\n        if (!response.ok) {\n            throw new Error('response was not ok');\n        }\n        const data = await response.json();\n\n        genresMap = {};\n        data.genres.forEach(genre => {\n            genresMap[genre.id] = genre.name;\n        });\n    } catch (error) {\n        console.error('error:', error);\n    }\n}\n\nfetchGenre();\n\n// Inicjalizacja przycisku wyszukiwania\ndocument.getElementById('searchButton').addEventListener('click', function(event) {\n    event.preventDefault();\n\n    // Wartość inputu\n    keyWord = document.getElementById('searchInput').value;\n    currentPage = 1; // Resetowanie strony\n    updateMovies();\n});\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    const searchInput = document.getElementById('searchInput');\n    const clearButton = document.getElementById('clearButton');\n\n    // Wyświetl przycisk czyszczenia, jeśli pole wyszukiwania ma wartość\n    searchInput.addEventListener('input', function () {\n        if (searchInput.value.length > 0) {\n            clearButton.style.display = 'block'; // Wyświetla przycisk\n        } else {\n            clearButton.style.display = 'none'; // Ukrywa przycisk\n        }\n    });\n\n    // Funkcja do czyszczenia pola wyszukiwania\n    clearButton.addEventListener('click', function () {\n        searchInput.value = ''; // Czyści pole\n        clearButton.style.display = 'none'; // Ukrywa przycisk\n        searchInput.focus(); // Ustawia fokus na pole wyszukiwania\n    });\n\n    // Inicjalizacja przycisku wyszukiwania\n    document.getElementById('searchButton').addEventListener('click', function(event) {\n        event.preventDefault();\n        const keyWord = searchInput.value; // Wartość inputu\n        // Wywołaj funkcję do wyszukiwania filmów, jeśli jest to potrzebne\n        if (keyWord) {\n            searchMovies(keyWord); // Wywołanie funkcji wyszukiwania filmów\n        }\n    });\n});\n\n// Inicjalizacja\nasync function init() {\n    await fetchGenres(apikey);\n    await selector();\n    await populateYears();\n    popularMovies(currentPage); // Domyślnie załaduj popularne filmy\n}\n\n// Funkcja dodająca film do localStorage\nfunction addToLibrary(movie) {\n    let library = JSON.parse(localStorage.getItem('library')) || [];\n    library.push(movie);\n    localStorage.setItem('library', JSON.stringify(library));\n}\n\n// Obsługa kliknięcia przycisku 'Add to my'\ndocument.querySelectorAll('.add-to-my-btn').forEach(button => {\n    button.addEventListener('click', function() {\n        const movie = {\n            title: this.parentElement.querySelector('.movie-title').innerText,\n            genre: this.parentElement.querySelector('.movie-genre').innerText,\n        };\n        addToLibrary(movie);\n        alert(`${movie.title} został dodany do Twojej biblioteki!`);\n    });\n});\n\ninit();\n","// Funkcja do otwierania pop-upu\nexport async function openPopUp(movie, apikey) {\n    const popUpContainer = document.getElementById('popUpContainer');\n    const popUpImage = document.getElementById('popUpImage');\n    const popUpDescription = document.getElementById('popUpDescription');\n\n    // Clear previous content\n    popUpImage.innerHTML = ''; // Clear any existing image\n    popUpDescription.innerHTML = ''; // Clear any existing description\n\n    // Create an img element for the movie poster\n    const imgEl = document.createElement('img');\n    imgEl.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n    // Append the image to the pop-up image div\n    popUpImage.appendChild(imgEl);\n\n    // Fetch genres and map them\n    const genreMap = await fetchGenres(apikey);\n    const genreNames = movie.genre_ids.map(id => genreMap[id]).filter(name => name); // Map IDs to names\n\n    popUpDescription.innerHTML = `\n        <h2>${movie.title}</h2>\n        <p class=\"pop-up-description-data vote\" >Vote / Votes: <span> ${movie.vote_average} / ${movie.vote_count}</span></p>\n        <p class=\"pop-up-description-data popularity\">Popularity: <span>${movie.popularity}</span></p>\n        <p class=\"pop-up-description-data gendre\">Genre: <span>${genreNames.length > 0 ? genreNames.join(', ') : ''}</span></p>\n        <p class=\"pop-up-description-data about\"> ABOUT:</p>\n        <p class=\"pop-up-description-data about-desc\"> ${movie.overview}</p>\n        <button class=\"buttonAddToMyLibrary\" id=\"buttonAddToMyLibrary\">Add to my</button>\n    `;\n\n    // Show the pop-up\n    popUpContainer.style.display = 'flex';\n\n    // Close pop-up event\n    document.getElementById('closePopUp').onclick = function() {\n        popUpContainer.style.display = 'none';\n    };\n}\n\n// Funkcja do pobierania gatunków\nexport async function fetchGenres(apikey) {\n    try {\n        const response = await fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${apikey}&language=en-US&`);\n        const data = await response.json();\n\n        // Tworzenie mapy ID gatunków do nazw\n        const genreMap = {};\n        data.genres.forEach(genre => {\n            genreMap[genre.id] = genre.name;\n        });\n\n        return genreMap;\n    } catch (error) {\n        console.error('Błąd podczas pobierania gatunków:', error);\n        return {};\n    }\n}"],"names":["$bpxeT","parcelRequire","$c24d5c3b10b9375f$export$873fe25bfa110c5b","movie","apikey","$c24d5c3b10b9375f$var$_openPopUp","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","popUpContainer","popUpImage","popUpDescription","imgEl","genreMap","genreNames","document","getElementById","innerHTML","createElement","src","concat","poster_path","appendChild","$c24d5c3b10b9375f$export$e95d448b93b2cdb","_ctx","sent","genre_ids","map","id","filter","name","title","vote_average","vote_count","popularity","length","join","overview","style","display","onclick","$c24d5c3b10b9375f$var$_fetchGenres","response","data","fetch","json","genres","forEach","genre","console","error","t0","$01039996e00cb7ba$var$apikey","$01039996e00cb7ba$var$gallery","querySelector","$01039996e00cb7ba$var$currentPage","$01039996e00cb7ba$var$totalPages","$01039996e00cb7ba$var$keyWord","$01039996e00cb7ba$var$genresMap","$01039996e00cb7ba$var$selector","$01039996e00cb7ba$var$_selector","countrySelect","countries","i","country","option","value","cca2","textContent","common","$01039996e00cb7ba$var$populateYears","$01039996e00cb7ba$var$_populateYears","yearSelect","currentYear","year","Date","getFullYear","$01039996e00cb7ba$var$renderBtn","$01039996e00cb7ba$var$_renderBtn","paginationBtn","prevBtn","btn","dots","lastBtn","nextBtn","classList","add","addEventListener","$01039996e00cb7ba$var$searchMovies","$01039996e00cb7ba$var$popularMovies","Math","min","$01039996e00cb7ba$var$_popularMovies","page","regionParams","yearParams","apiUrl","_args","ok","Error","total_pages","results","movieEl","className","titleEl","genresEl","release_date","split","keyWord1","$01039996e00cb7ba$var$_searchMovies","apiURL","imageData","posters","_$imgEl","file_path","$01039996e00cb7ba$var$_fetchGenre","urlGenre","$01039996e00cb7ba$var$_init","$01039996e00cb7ba$var$fetchGenre","event","preventDefault","updateMovies","searchInput","clearButton","focus","keyWord2","querySelectorAll","button","parentElement","innerText","library","JSON","parse","localStorage","getItem","push","setItem","stringify","$01039996e00cb7ba$var$addToLibrary","alert","$01039996e00cb7ba$var$init"],"version":3,"file":"catalog.c0f9c3fa.js.map"}